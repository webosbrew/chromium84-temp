// Copyright 2016-2018 LG Electronics, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

#include "ui/gl/neva/video_texture_manager.h"

namespace gfx {

class PlatformVideoTextureLib;

// This class serves video texture frames generated by a native module.
// Getter for the singleton. This will return NULL on failure.
VideoTextureManager* VideoTextureManager::GetInstance() {
  return nullptr;
}

  // Register a client ID of VideoTexture object to update_infos_.
  // The client ID will be used as a key for interfacing between
  // VideoTexture and VideoTextureManager.
  void VideoTextureManager::Register(uint32_t client_id) {}

  // Unregister a client ID.
  void VideoTextureManager::Unregister(uint32_t client_id) {}

  // Update the texture to the most recent frame from the texture stream.
  void VideoTextureManager::Update(unsigned prev_texture_id,
                                   unsigned* texture_id,
                                   int* texture_width,
                                   int* texture_height) {}

  // Set the listener callback, which will be invoked on the same thread that
  // is being called from here for registration.
  void VideoTextureManager::SetFrameAvailableCallback(
      uint32_t client_id,
      const base::Closure& callback) {}

  void VideoTextureManager::DispatchCallBacks() {}

  // Check the platform supports video texture stream.
  bool VideoTextureManager::IsVideoTextureSupported() {
    return false;
  }

}  // namespace gfx
