// Copyright 2016-2018 LG Electronics, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

#ifndef UI_GL_NEVA_VIDEO_TEXTURE_MANAGER_H_
#define UI_GL_NEVA_VIDEO_TEXTURE_MANAGER_H_

#include <map>
#include <memory>

#include "base/callback.h"
#include "base/memory/singleton.h"
#include "base/synchronization/lock.h"
#include "ui/gl/gl_export.h"

namespace gfx {

class PlatformVideoTextureLib;

typedef std::map<uint32_t, base::Closure> CallbackMap;

// This class serves video texture frames generated by a native module.
class GL_EXPORT VideoTextureManager {
 public:
  // Getter for the singleton. This will return NULL on failure.
  static VideoTextureManager* GetInstance();

  // Register a client ID of VideoTexture object to update_infos_.
  // The client ID will be used as a key for interfacing between
  // VideoTexture and VideoTextureManager.
  void Register(uint32_t client_id);

  // Unregister a client ID.
  void Unregister(uint32_t client_id);

  // Update the texture to the most recent frame from the texture stream.
  void Update(unsigned prev_texture_id,
              unsigned* texture_id,
              int* texture_width,
              int* texture_height);

  // Set the listener callback, which will be invoked on the same thread that
  // is being called from here for registration.
  void SetFrameAvailableCallback(uint32_t client_id, const base::Closure& callback);

  void DispatchCallBacks();

  // Check the platform supports video texture stream.
  static bool IsVideoTextureSupported();

 protected:
  VideoTextureManager();
  ~VideoTextureManager();

 private:
  friend struct base::DefaultSingletonTraits<VideoTextureManager>;

  // Create native contexts for updating video texture frames.
  // The caller must release native contexts by calling Terminate()
  // when media client doesn't want to update texture frames anymore.
  bool Initialize();

  // Release native contexts.
  void Terminate();

  // Map from client ID to callback generated by this class.
  CallbackMap callback_map_;
  base::Lock callback_map_lock_;
  bool initialized_;

  std::unique_ptr<PlatformVideoTextureLib> platform_lib_;

  DISALLOW_COPY_AND_ASSIGN(VideoTextureManager);
};

}  // namespace gfx

#endif  // UI_GL_NEVA_VIDEO_TEXTURE_MANAGER_H_
