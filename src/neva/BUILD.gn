# Copyright 2016 LG Electronics, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

import("//neva/neva.gni")
import("//ui/ozone/ozone.gni")

config("config") {
  configs = []
  defines = []

  cflags = [
    "-Wno-unused-variable",
  ]

  include_dirs = [
    ".",
    "$target_gen_dir",
  ]

  # All defines for Neva must be defined here

  if (enable_browser_control_webapi) {
    defines += [ "ENABLE_BROWSER_CONTROL_WEBAPI=1" ]
  }

   if (enable_sample_webapi) {
    defines += [ "ENABLE_SAMPLE_WEBAPI=1" ]
  }

  if (enable_memorymanager_webapi) {
    defines += [ "ENABLE_MEMORYMANAGER_WEBAPI=1" ]
  }

  if (enable_network_error_page_controller_webapi) {
    defines += [ "ENABLE_NETWORK_ERROR_PAGE_CONTROLLER_WEBAPI=1" ]
  }

  if (neva_dcheck_always_on) {
    defines += [ "NEVA_DCHECK_ALWAYS_ON=1" ]
  }

  if (ozone_platform_wayland_external) {
    defines += [ "OZONE_PLATFORM_WAYLAND_EXTERNAL=1" ]
  }

  if (ozone_platform_wayland) {
    defines += [ "OZONE_PLATFORM_WAYLAND=1" ]
  }

  if (is_webos) {
    defines += [
      "OS_WEBOS=1",
      "NEVA_VIDEO_HOLE=1",
    ]
  }

  if (use_neva_appruntime) {
    defines += [ "USE_NEVA_APPRUNTIME=1" ]
  }

  if (use_neva_media) {
    defines += [ "USE_NEVA_MEDIA=1" ]
    # we will drop below when all product move on gav.
    if (use_gav) {
      defines += [ "USE_GAV=1" ]
    } else {
      defines += [ "USE_ACB=1" ]
    }
  }

  if (use_neva_npapi) {
    defines += [ "USE_NEVA_NPAPI=1" ]
  }

  if (use_neva_punch_hole) {
    defines += [ "USE_NEVA_PUNCH_HOLE=1" ]
  }

  if (enable_webm_audio_codecs) {
    defines += [ "ENABLE_WEBM_AUDIO_CODECS=1" ]
  }

  if (enable_webm_video_codecs) {
    defines += [ "ENABLE_WEBM_VIDEO_CODECS=1" ]
  }

  if (use_memory_trace) {
    defines += [ "USE_MEMORY_TRACE=1" ]
  }

  if(is_linux && is_debug) {
    cflags += [ "-Wno-deprecated-register" ]
  }

  if (webos_product_type == "tv") {
    defines += [ "USE_TV_MEDIA=1" ]
  } else if (webos_product_type == "signage") {
    defines += [ "USE_SIGNAGE_MEDIA=1" ]
  }

  if (use_videotexture && (webos_product_type != "tv")) {
    defines += [ "USE_VIDEO_TEXTURE=1" ]
  }

  if (enable_lg_svp) {
    assert(use_neva_media, "enable_lg_svp is turned on without use_neva_media.")
    defines += [ "ENABLE_LG_SVP=1" ]
  }

  if (use_cbe) {
    defines += [
      "USE_CBE=1",
    ]
  }

  if (use_lttng && current_toolchain == default_toolchain) {
    configs += [
      "//build/config/linux/lttng:lttngust",
    ]
  }

  if (use_neva_extensions) {
    defines += [ "USE_NEVA_EXTENSIONS=1" ]
  }

  if (use_webos_dile_crypto) {
    defines += [ "USE_WEBOS_DILE_CRYPTO=1" ]
  }

  if (use_neva_suspend_media_capture) {
    defines += [ "USE_NEVA_SUSPEND_MEDIA_CAPTURE=1" ]
  }

  if (use_filescheme_codecache) {
    defines += [ "USE_FILESCHEME_CODECACHE=1" ]
  }

  if (use_neva_webrtc) {
    assert(use_neva_media, "use_neva_webrtc is turned on without use_neva_media.")
    defines += [ "USE_NEVA_WEBRTC=1" ]
  }
}
