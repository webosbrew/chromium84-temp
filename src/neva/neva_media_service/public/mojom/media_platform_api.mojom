// Copyright 2020 LG Electronics, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

module neva_media.mojom;

import "media/mojo/mojom/media_types.mojom";
import "media/mojo/mojom/neva/media_codec_capability.mojom";
import "media/mojo/mojom/neva/media_track_info.mojom";
import "media/mojo/mojom/neva/media_types_neva.mojom";
import "mojo/public/mojom/base/time.mojom";
import "ui/gfx/geometry/mojom/geometry.mojom";

interface MediaPlatformAPIListener {
  OnNaturalVideoSizeChanged(gfx.mojom.Size size);
  OnResumeDone();
  OnSuspendDone();
  OnActiveRegionChanged(gfx.mojom.Rect rect);
  OnPipelineStatusChanged(media.mojom.PipelineStatus status);
  OnPlayerEvent(media.mojom.PlayerEvent event);
  OnStatistics(media.mojom.PipelineStatistics status);
  OnUpdateCurrentTime(mojo_base.mojom.TimeDelta current_time);
};

interface MediaPlatformAPI {
  Initialize(media.mojom.AudioDecoderConfig? audio_config,
             media.mojom.VideoDecoderConfig? video_config,
             handle<data_pipe_consumer> decrypt_pipe)
             => (media.mojom.PipelineStatus status);
  // rect and in_rect should not be empty.
  SetDisplayWindow(gfx.mojom.Rect rect,
                   gfx.mojom.Rect in_rect,
                   bool fullscreen);
  [Sync] Feed(media.mojom.DecoderBuffer buffer, media.mojom.FeedType type) => (bool result);
  Seek(mojo_base.mojom.TimeDelta time);
  Suspend(media.mojom.SuspendReason reason);
  Resume(mojo_base.mojom.TimeDelta paused_time,
         media.mojom.RestorePlaybackMode restore_playback_mode);
  SetPlaybackRate(float playback_rate);
  SetPlaybackVolume(double volume);
  [Sync] AllowedFeedVideo() => (bool result);
  [Sync] AllowedFeedAudio() => (bool result);
  Finalize();
  SetKeySystem(string key_system);
  [Sync] IsEOSReceived() => (bool result);
  UpdateVideoConfig(media.mojom.VideoDecoderConfig video_config);

  SetVisibility(bool visible);

  SwitchToAutoLayout();
  SetDisableAudio(bool disable);

  [Sync] HaveEnoughData() => (bool result);

  SetMediaLayerId(string media_layer_id);
  SetMediaPreferences(string preferences);
  SetMediaCodecCapabilities(array<media.mojom.MediaCodecCapability> capabilities);
};