From 9bf21357ea3608510bf71fc6de24b43be8f09f56 Mon Sep 17 00:00:00 2001
From: Kalyan Kondapally <kalyan.kondapally@intel.com>
Date: Fri, 11 Sep 2015 22:31:20 -0700
Subject: [PATCH 07/14] Add needed support in PlatformWindow.

This patch adds necessary API support in PlatformWindow. The changes
need to be evaluated further before trying to upstream them.
---
 ui/platform_window/platform_window.h | 34 ++++++++++++++++++++++++++++++++++
 1 file changed, 34 insertions(+)

diff --git a/ui/platform_window/platform_window.h b/ui/platform_window/platform_window.h
index a8fd6ee..95dd61e 100644
--- a/ui/platform_window/platform_window.h
+++ b/ui/platform_window/platform_window.h
@@ -8,11 +8,14 @@
 #include "base/memory/scoped_ptr.h"
 #include "base/strings/string16.h"
 #include "ui/base/cursor/cursor.h"
+#include "ui/gfx/native_widget_types.h"
 
 namespace gfx {
 class Rect;
 }
 
+class SkPath;
+
 namespace ui {
 
 class PlatformImeController;
@@ -24,8 +27,39 @@ class PlatformWindowDelegate;
 // underlying platform windowing system (i.e. X11/Win/OSX).
 class PlatformWindow {
  public:
+  enum PlatformWindowType {
+    PLATFORM_WINDOW_UNKNOWN,
+    PLATFORM_WINDOW_TYPE_TOOLTIP,
+    PLATFORM_WINDOW_TYPE_POPUP,
+    PLATFORM_WINDOW_TYPE_MENU,
+    PLATFORM_WINDOW_TYPE_BUBBLE,
+    PLATFORM_WINDOW_TYPE_WINDOW,
+    PLATFORM_WINDOW_TYPE_WINDOW_FRAMELESS
+  };
+
   virtual ~PlatformWindow() {}
 
+  virtual void InitPlatformWindow(PlatformWindowType type,
+                                  gfx::AcceleratedWidget parent_window) { }
+  virtual void SetWindowShape(const SkPath& path) { }
+  virtual void SetOpacity(unsigned char opacity) { }
+
+  // Asks the GPU process to send data of type |mime_type|.
+  virtual void RequestDragData(const std::string& mime_type) { }
+  virtual void RequestSelectionData(const std::string& mime_type) { }
+
+  // Indicates to the drag source that the data will or will not be accepted
+  // at the current (x, y) coordinates. Note that there is a harmless race here.
+  // The browser process could decide to accept or reject the data based on
+  // old (x, y) coordinates that have since been updated by a new DragMotion
+  // event in the GPU process. This doesn't matter because the browser process
+  // will promptly correct the matter by calling one of these functions again
+  // when it receives the DragMotion event, and these functions are only used to
+  // provide user feedback: they don't affect correctness.
+  virtual void DragWillBeAccepted(uint32_t serial,
+                                  const std::string& mime_type) { }
+  virtual void DragWillBeRejected(uint32_t serial) { }
+
   virtual void Show() = 0;
   virtual void Hide() = 0;
   virtual void Close() = 0;
-- 
1.9.1

